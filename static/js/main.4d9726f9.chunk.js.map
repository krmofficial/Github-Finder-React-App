{"version":3,"sources":["components/GithubSearch.js","redux/user/userAction.js","redux/user/userActionType.js","redux/userInfo/userInfoAction.js","redux/userInfo/userInfoActionType.js","components/GithubCredentials.js","redux/userRepos/userReposAction.js","redux/userRepos/userReposActionType.js","redux/userInfo/userInfoReducer.js","components/GithubProfileCard.js","components/GithubProfileDetails.js","components/GithubProfile.js","redux/userRepos/userReposReducer.js","components/GithubRepos.js","redux/user/userReducer.js","components/GithubSearchApp.js","redux/rootReducer.js","redux/store.js","App.js","serviceWorker.js","index.js"],"names":["GithubSearch","dispatch","useDispatch","useState","user","setUser","Fragment","action","className","onSubmit","event","preventDefault","type","payload","username","dataUrl","Axios","get","then","response","data","catch","error","fetchUserInfo","dataURL","fetchRepos","size","onChange","target","value","placeholder","initialState","loading","userInfo","errorMessage","GithubProfileCard","userDetails","useSelector","state","src","avatar_url","alt","name","bio","href","html_url","GithubProfileDetails","followers","public_repos","public_gists","following","location","email","company","blog","created_at","url","GithubProfile","repos","GithubRepos","map","repo","stargazers_count","watchers_count","GithubSearchApp","Object","keys","length","rootReducer","combineReducers","middleWares","thunk","store","createStore","composeWithDevTools","applyMiddleware","App","props","React","Component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.4d9726f9.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {userSearch} from \"../redux/user/userAction\";\r\nimport {fetchUserInfo} from \"../redux/userInfo/userInfoAction\";\r\nimport {fetchRepos} from \"../redux/userRepos/userReposAction\";\r\n\r\nlet GithubSearch = () => {\r\n\r\n    let dispatch = useDispatch();\r\n\r\n    let [user, setUser] = useState('');\r\n\r\n    let updateInput = (event)=>{\r\n        setUser(event.target.value);\r\n    };\r\n\r\n    let submitUsername = (event) => {\r\n        event.preventDefault();\r\n        dispatch(userSearch(user));\r\n        dispatch(fetchUserInfo(user));\r\n        dispatch(fetchRepos(user));\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <form action=\"\" className=\"form-inline\" onSubmit={submitUsername}>\r\n                <div className=\"form-group\">\r\n                    <input size=\"40\"\r\n                           onChange={updateInput}\r\n                           type=\"text\" placeholder=\"Enter Github User\" className=\"form-control\"/>\r\n                </div>\r\n                {/*<h2>{user}</h2>*/}\r\n                <button className=\"btn btn-secondary\">Search</button>\r\n            </form>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default GithubSearch;","import {USER_SEARCH} from \"./userActionType\";\r\n\r\nlet userSearch = (username) => {\r\n    return{\r\n        type : USER_SEARCH,\r\n        payload : username\r\n    }\r\n};\r\n\r\nexport {userSearch};","\r\nexport const USER_SEARCH = 'USER_SEARCH';","import {USERINFO_FETCH_REQUEST, USERINFO_FETCH_SUCCESS, USERINFO_FETCH_FAILURE} from \"./userInfoActionType\";\r\nimport Axios from \"axios\";\r\nimport {GithubClientId} from \"../../components/GithubCredentials\";\r\n\r\n// Special Function\r\nlet fetchUserInfo = (username) => {\r\n    return (dispatch) => {\r\n        dispatch({type : USERINFO_FETCH_REQUEST});\r\n        let dataUrl = `https://api.github.com/users/${username}?clientId=${GithubClientId}`;\r\n        Axios.get(dataUrl).then((response) => {\r\n            dispatch({type : USERINFO_FETCH_SUCCESS, payload : response.data});\r\n        }).catch((error) => {\r\n            dispatch({type : USERINFO_FETCH_FAILURE, payload : error});\r\n        });\r\n    }\r\n};\r\n\r\nexport {fetchUserInfo};","\r\nexport const USERINFO_FETCH_REQUEST = 'USERINFO_FETCH_REQUEST';\r\nexport const USERINFO_FETCH_SUCCESS = 'USERINFO_FETCH_SUCCESS';\r\nexport const USERINFO_FETCH_FAILURE = 'USERINFO_FETCH_FAILURE';","export const GithubClientId = 'e6dfa3decdeadecbdd98';\r\n\r\nexport const GithubClientSecret = '4fef996a35edc31c45934dfefa3b275417042f3f';","import {REPOS_FETCH_REQUEST, REPOS_FETCH_SUCCESS, REPOS_FETCH_FAILURE} from \"./userReposActionType\";\r\nimport Axios from \"axios\";\r\nimport {GithubClientId, GithubClientSecret} from '../../components/GithubCredentials';\r\n\r\n// special function\r\nlet fetchRepos = (username) => {\r\n    return (dispatch) => {\r\n        dispatch({type : REPOS_FETCH_REQUEST});\r\n        let dataURL = `http://api.github.com/users/${username}/repos?clientId=${GithubClientId}&clientSecret=${GithubClientSecret}`;\r\n        Axios.get(dataURL).then((response) => {\r\n            dispatch({type : REPOS_FETCH_SUCCESS, payload : response.data});\r\n        }).catch((error) => {\r\n            dispatch({type : REPOS_FETCH_FAILURE, payload: error});\r\n        });\r\n    }\r\n};\r\n\r\nexport {fetchRepos}","\r\nexport const REPOS_FETCH_REQUEST = 'REPOS_FETCH_REQUEST';\r\nexport const REPOS_FETCH_SUCCESS = 'REPOS_FETCH_SUCCESS';\r\nexport const REPOS_FETCH_FAILURE = 'REPOS_FETCH_FAILURE';","import {USERINFO_FETCH_REQUEST, USERINFO_FETCH_SUCCESS, USERINFO_FETCH_FAILURE} from \"./userInfoActionType\";\r\n\r\nexport const USERINFO_FEATURE_KEY = 'userInfo';\r\n\r\nlet initialState = {\r\n    loading : false,\r\n    userInfo : {},\r\n    errorMessage : ''\r\n};\r\n\r\nlet userInfoReducer = (state = initialState, action) => {\r\n    let {type, payload} = action;\r\n    switch (type) {\r\n        case USERINFO_FETCH_REQUEST :\r\n            return{\r\n                ...state,\r\n                loading: true\r\n            };\r\n        case USERINFO_FETCH_SUCCESS:\r\n            return{\r\n                ...state,\r\n                userInfo: payload\r\n            };\r\n        case USERINFO_FETCH_FAILURE :\r\n            return {\r\n                ...state,\r\n                errorMessage : payload\r\n            };\r\n        default : return state;\r\n\r\n    }\r\n};\r\n\r\nexport {userInfoReducer};","import React from 'react';\r\nimport {useSelector} from \"react-redux\";\r\nimport {USERINFO_FEATURE_KEY} from \"../redux/userInfo/userInfoReducer\";\r\n\r\nlet GithubProfileCard = () => {\r\n\r\n    let userDetails = useSelector((state) => {\r\n        return state[USERINFO_FEATURE_KEY].userInfo;\r\n    });\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"card\">\r\n                <img src={userDetails.avatar_url} className=\"img-fluid img-thumbnail\" alt=\"\"/>\r\n                <div className=\"card-body\">\r\n                    <span className=\"h5\">{userDetails.name}</span>\r\n                    <p>{userDetails.bio}</p>\r\n                    <a href={userDetails.html_url} className=\"btn btn-sm btn-success\" target=\"_blank\">Profile</a>\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default GithubProfileCard;","import React from 'react';\r\nimport {useSelector} from \"react-redux\";\r\nimport {USERINFO_FEATURE_KEY} from \"../redux/userInfo/userInfoReducer\";\r\n\r\nlet GithubProfileDetails = () => {\r\n\r\n    let userDetails = useSelector((state) => {\r\n        return state[USERINFO_FEATURE_KEY].userInfo;\r\n    });\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"card\">\r\n                <div className=\"card-body\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col\">\r\n                            <span className=\"badge badge-primary h2 mx-2\">{userDetails.followers} Followers</span>\r\n                            <span className=\"badge badge-success h2 mx-2\">{userDetails.public_repos} Repos</span>\r\n                            <span className=\"badge badge-warning h2 mx-2\">{userDetails.public_gists} Gists</span>\r\n                            <span className=\"badge badge-danger h2 mx-2\">{userDetails.following} Following</span>\r\n                        </div>\r\n                    </div>\r\n                    <ul className=\"list-group\">\r\n                        <li className=\"list-group-item\">\r\n                            User Name : {userDetails.name}\r\n                        </li>\r\n                        <li className=\"list-group-item\">\r\n                            Location : {userDetails.location}\r\n                        </li>\r\n                        <li className=\"list-group-item\">\r\n                            Email : {userDetails.email}\r\n                        </li>\r\n                        <li className=\"list-group-item\">\r\n                            Company : {userDetails.company}\r\n                        </li>\r\n                        <li className=\"list-group-item\">\r\n                            Blog : {userDetails.blog}\r\n                        </li>\r\n                        <li className=\"list-group-item\">\r\n                            Mentor : {userDetails.created_at}\r\n                        </li>\r\n                        <li className=\"list-group-item\">\r\n                            Profile Url : {userDetails.url}\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default GithubProfileDetails;","import React, {useEffect} from 'react';\r\nimport GithubProfileCard from \"./GithubProfileCard\";\r\nimport GithubProfileDetails from \"./GithubProfileDetails\";\r\n\r\nlet GithubProfile = () => {\r\n    return (\r\n        <React.Fragment>\r\n            {/*<h2>{JSON.stringify(userInfo)}</h2>*/}\r\n\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-3\">\r\n                                <GithubProfileCard/>\r\n                            </div>\r\n\r\n                            <div className=\"col-md-9\">\r\n                                <GithubProfileDetails/>\r\n                            </div>\r\n                        </div>\r\n\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default GithubProfile;","import {REPOS_FETCH_REQUEST, REPOS_FETCH_SUCCESS, REPOS_FETCH_FAILURE} from \"./userReposActionType\";\r\n\r\nexport const REPOS_FEATURE_KEY = 'userRepos';\r\n\r\nlet initialState = {\r\n    loading : false,\r\n    repos : [],\r\n    errorMessage : ''\r\n};\r\n\r\nlet reposReducer = (state = initialState, action) =>{\r\n    let {type, payload} = action;\r\n    switch (type) {\r\n        case REPOS_FETCH_REQUEST :\r\n            return{\r\n                ...state,\r\n                loading : true\r\n            };\r\n        case REPOS_FETCH_SUCCESS :\r\n            return {\r\n                ...state,\r\n                repos: payload\r\n            };\r\n        case REPOS_FETCH_FAILURE :\r\n            return {\r\n                ...state,\r\n                errorMessage: payload\r\n            };\r\n        default : return state;\r\n    }\r\n};\r\n\r\nexport {reposReducer};","import React from 'react';\r\nimport {useSelector} from \"react-redux\";\r\nimport {REPOS_FEATURE_KEY} from \"../redux/userRepos/userReposReducer\";\r\n\r\nlet GithubRepos = () => {\r\n\r\n    let repos = useSelector((state) => {\r\n        return state[REPOS_FEATURE_KEY].repos;\r\n    });\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {/* <pre>{JSON.stringify(repos)}</pre> */}\r\n            <div className=\"card\">\r\n                <div className=\"card-header\">\r\n                    <p className=\"h4\">Your Repositories</p>\r\n                </div>\r\n                <div className=\"card-body\">\r\n                    <table className=\"table table-hover table-striped text-white\">\r\n                        <thead>\r\n                        <tr className=\"bg-dark text-white\">\r\n                            <th>Repository Name</th>\r\n                            <th>Stars Count</th>\r\n                            <th>Watcher Count</th>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        {\r\n                            repos.map((repo)=>{\r\n                                return(\r\n                                    <tr>\r\n                                        <td><a href={repo.html_url} target=\"_blank\">{repo.name}</a></td>\r\n                                        <td><span className=\"badge badge-primary\">{repo.stargazers_count}</span></td>\r\n                                        <td><span className=\"badge badge-warning\">{repo.watchers_count}</span></td>\r\n                                    </tr>\r\n                                )\r\n                            })\r\n                        }\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default GithubRepos;\r\n\r\n","import {USER_SEARCH} from \"./userActionType\";\r\n\r\nexport const USER_SEARCH_FEATURE_KEY = 'user'\r\n\r\nlet initialState = {\r\n    username : ''\r\n};\r\n\r\nlet userReducer = (state = initialState, action) => {\r\n    let {type, payload} = action;\r\n    switch (type) {\r\n        case USER_SEARCH :\r\n            return{\r\n                username : payload\r\n            };\r\n        default : return state;\r\n    }\r\n};\r\n\r\nexport {userReducer};","import React, {useEffect, useState} from 'react'\r\nimport GithubSearch from \"./GithubSearch\";\r\nimport GithubProfile from \"./GithubProfile\";\r\nimport GithubRepos from \"./GithubRepos\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {USER_SEARCH_FEATURE_KEY} from \"../redux/user/userReducer\";\r\nimport {USERINFO_FEATURE_KEY} from \"../redux/userInfo/userInfoReducer\";\r\nimport {REPOS_FEATURE_KEY} from \"../redux/userRepos/userReposReducer\";\r\n\r\nlet GithubSearchApp = () => {\r\n\r\n    let username = useSelector((state) => {\r\n        return state[USER_SEARCH_FEATURE_KEY].username;\r\n    });\r\n\r\n    let userDetails = useSelector((state) => {\r\n        return state[USERINFO_FEATURE_KEY].userInfo;\r\n    });\r\n\r\n    let repos = useSelector((state) => {\r\n        return state[REPOS_FEATURE_KEY].repos;\r\n    });\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"container mt-3\">\r\n                <div className=\"row\">\r\n                    <div className=\"col\">\r\n                        <div className=\"card\">\r\n                            <div className=\"card-header bg-secondary text-white\">\r\n                                <h2>Github User Search</h2>\r\n                                <h3>Username :- {username}</h3>\r\n                            </div>\r\n                            <div className=\"card-body\">\r\n                                <GithubSearch/>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                {/*Github Profile*/}\r\n                {\r\n                    Object.keys(userDetails).length > 0 ? <React.Fragment>\r\n                        <GithubProfile/>\r\n                    </React.Fragment> : null\r\n                }\r\n\r\n\r\n\r\n                {\r\n                    repos.length !== 0 ?\r\n                        <React.Fragment>\r\n                            <GithubRepos/>\r\n                        </React.Fragment>\r\n                        : null\r\n                }\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default GithubSearchApp;","import {combineReducers} from \"redux\";\r\nimport {USER_SEARCH_FEATURE_KEY, userReducer} from \"./user/userReducer\";\r\nimport {userInfoReducer, USERINFO_FEATURE_KEY} from \"./userInfo/userInfoReducer\";\r\nimport {REPOS_FEATURE_KEY, reposReducer} from \"./userRepos/userReposReducer\";\r\n\r\nlet rootReducer = combineReducers({\r\n    [USER_SEARCH_FEATURE_KEY] : userReducer,\r\n    [USERINFO_FEATURE_KEY] : userInfoReducer,\r\n    [REPOS_FEATURE_KEY] : reposReducer\r\n});\r\n\r\nexport{rootReducer};","import {rootReducer} from \"./rootReducer\";\r\nimport {composeWithDevTools} from \"redux-devtools-extension\";\r\nimport {applyMiddleware, createStore} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nlet middleWares = [thunk];\r\n\r\nlet store = createStore(rootReducer, composeWithDevTools(applyMiddleware(...middleWares)));\r\n\r\nexport{store};","import React from 'react';\nimport './App.css';\nimport GithubSearchApp from \"./components/GithubSearchApp\";\nimport {Provider} from \"react-redux\";\nimport {store} from './redux/store';\n\nclass App extends React.Component{\n    constructor(props) {\n        super(props);\n\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n\n                <nav className=\"navbar navbar-dark bg-dark text-white\">\n                    <a href=\"#\" className=\"navbar-brand\">Github Search Application</a>\n                </nav>\n\n                <Provider store={store}>\n                    <GithubSearchApp/>\n                </Provider>\n\n            </React.Fragment>\n        );\n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// MDBootstrap css files\nimport 'mdbootstrap/css/bootstrap.css';\nimport 'mdbootstrap/css/mdb.css';\nimport './Bootstrap/CSS Files/font-awesome-5.8.1.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}